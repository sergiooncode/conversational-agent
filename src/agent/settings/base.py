"""
Django settings for agent project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-!l2*i=we328-ybftili!mh9^5!x19wg0a0g7jem!upe+wq#dzx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # agent
    "agent.bots.apps.BotsConfig",
    "agent.prompts.apps.PromptsConfig",
    "agent.conversations.apps.ConversationsConfig",
    "agent.human_users.apps.HumanUsersConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "agent.urls.public"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "agent/templates/")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "agent.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("PG_DB", default="orbio-db"),
        "USER": env("PG_USER", default="orbio"),
        "PASSWORD": env("PG_PASSWORD", default="orbio"),
        "HOST": env("PG_HOST", default="agent-postgres"),
        "PORT": env.int("PG_PORT", default=5432),
        "OPTIONS": env.json("PG_OPTIONS", default={"connect_timeout": 3}),
        "CONN_MAX_AGE": 480,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging

LOGLEVEL = env.str("LOGLEVEL", default="info")

LOGFORMATTER = env.str("LOGFORMATTER", default="json")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
        "null": {"class": "logging.NullHandler"},
    },
    "root": {"level": "WARNING", "handlers": ["console"]},
    "loggers": {
        "django.request": {"handlers": ["null"], "propagate": False},
        "pydig.resolver": {"handlers": ["null"], "propagate": False},
    },
}

# OPEN AI
OPENAPI_API_KEY = env.str("OPENAPI_API_KEY", default="key")

# ELEVEN LABS
ELEVEN_LABS_API_KEY = env.str("ELEVEN_LABS_API_KEY", default="key")


def text_to_speech_text_template(summary):
    return (
        f"Calling regarding the order {summary['order_number']} which involved an "
        f"{summary['problem_category']} issue you faced with severity {summary['urgency_level']} which "
        f"was described as {summary['problem_description']}. "
        f"According to our records the issue is on the path to resolution and in a period "
        f"of 2-3 days you will receive an email from the corresponding department confirming "
        f"the steps forward on that resolution. We appreciate your business. Thanks for your "
        f"patience!"
    )
